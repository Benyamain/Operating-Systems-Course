Programming 5a Instructions
===========================

In this warm-up assignment for the MT system, you will need to write
short code for the functions in the files kernel.c and queue.c
that are marked with the comment `Add YOUR CODE here'.

    # Functions to complete in file kernel.c
    getpid():               Just one line is enough!
    printTaskQueues():      See output from user program

    # Functions to complete in file queue.c
    enqueue():              Insert PROC* into queue by priority + FCFS
    dequeue():              Pop off and return one PROC* from queue head
    printList();            Print the given queue in the form seen

The sub-directory ./pre-compiled/ contains:

  - A black-box statically-linked riscv64/linux executable kernel.prebuilt
  - Pre-compiled object code files kernel.o and queue.o

While you develop and test your code for kernel.c and queue.c, you can
re-build the MT system kernel using the pre-compiled .o files as follows:

    make clean
    cp ./pre-compiled/kernel.o .      # Drop this once you finish kernel.c
    cp ./pre-compiled/queue.o .       # Drop this once you finish queue.c
    make

This will build a kernel ./kernel even without the kernel.c and queue.c
files (essentially same as kernel.prebuilt), which you can run with:

    ./kernel

Adjusting the steps above will allow you to test your code in two stages.

My suggestion is that you first finish the two functions getpid() and
printTaskQueues() in the file kernel.c.  This will be easier, requiring
less than 10 lines of code.  The three pre-compiled functions from the
object file queue.o will be available for use without source code.
After finishing your code for kernel.c, you don't need the pre-compiled
kernel.o file anymore, so you can drop the `cp ./pre-compiled/kernel.o .'
line above, and build as follows:

    make clean
    cp ./pre-compiled/queue.o .       # Drop this when you finish queue.c
    make

After that, complete your code for the three functions in queue.c (less
than 30 lines).  Once you have finished both files, you will have full
source code, so you can compile simply with:

    make clean
    make

Then run the built kernel and test it out thoroughly, making sure its
behavior is identical to that of the pre-built one.

Once everything runs correctly, you are done - submit your source code for
kernel.c and queue.c as a unix tarball, following assignment instructions.

DO NOT INCLUDE ANY COMPILED BINARY OBJECT OR EXECUTABLE FILE
IN YOUR SUBMISSION TARBALL.

