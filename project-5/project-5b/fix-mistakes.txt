* show the input (Lgets) for what code you want to use when putting the current process on wait (sleep)?? so, basically, when we run the wait syscall command with t, should we check with an event number or no? maybe we should ...

* validate for wait() that if there is only one process currently running and nothing else is in the ready queue list, then we cannot put that process to wait (to sleep??).  we can output a message for this to user.

* double check output matches that of the prebuilt demo

* validate that when we are sleeping the current processes with specific event numbers, if all process go to sleep, no processes in the ready queue list anymore, and there is currently only a single running process, that process cannot be put to sleep. we can output a message for this to user.

* check that when we wakeup a process, we ignore 0 because that sets it in an infinite loop, so 0 should not be considered as an event number?

* see what is the point of the wait() syscall command

* when p1 is the current process, we wait() syscall command it, there is still a process in the ready queue list that is valid, but this also is then added to the sleep list for some odd reason

* when we have more than one process in the sleep list, say we have 2, then i use wake() syscall command on one of them, specifying the event number pid, after doing so, the sleep list gets messed up, but i know why. its because when we are trying to wake up a process that is not the head of the sleep list, the list gets messed up and it just spits out jargon. to fix this, we should only specify the pid that matches what is the process pid of the head (although i am wondering if that is not correct, and we are expected to wakeup any of the processes that are in the sleeping list (whether through pid from the wait syscall command or the event number we put down through sleep syscall command)??

* when something is in the sleep list, does that mean the process should be marked as 1 or 0 [pid 1/0]??

* should the exit code be killing the current process and having a code associated with it? or is it where the exit code is what specifies the pid of some process in the ready queue list or the current process, and kills it and puts it back into the free list?

* does the same thing go when we are trying to sleep something? are we just entering some event number for the current process, or would it just be specifying the pid (given they are the current process or in the ready queue list) to put to sleep ... (of course wait depends on this so it would indirectly concern that syscall command as well) ...

* something very odd is going with wait() syscall command, it puts a lot of processes in the ready queue list in the sleep list, leaving only p1 as the current process and the ready queue list is empty ...
